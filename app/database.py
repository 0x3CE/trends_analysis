# app/database.py
"""Database configuration and session management.

* **R√¥le global** : g√©rer la **connexion √† la base de donn√©es** et fournir une session SQLAlchemy utilisable via FastAPI.
  üëâ C‚Äôest la colonne vert√©brale de la persistance, utilis√©e par tous les services et routes.

* **Fonctionnalit√©s principales** :

  1. **`create_database_engine()`**

     * Construit un moteur SQLAlchemy √† partir de `settings.database_url`.
     * Si c‚Äôest **SQLite** ‚Üí applique des configs sp√©ciales :

       * `check_same_thread=False` (multi-threads autoris√©s).
       * `StaticPool` (utile pour tests et bases en m√©moire).
     * Active le mode debug SQL (`echo=True`) si `settings.debug=True`.

  2. **Moteur et session**

     * `engine` ‚Üí moteur DB global.
     * `SessionLocal` ‚Üí factory de sessions (`autocommit=False`, `autoflush=False`).
     * `Base = declarative_base()` ‚Üí base des mod√®les ORM (`models.Tweet`, etc.).

  3. **`get_db()`**

     * Fonction g√©n√©ratrice pour FastAPI (d√©pendance `Depends(get_db)`).
     * Fournit une session `db`.
     * G√®re les erreurs : rollback en cas d‚Äôexception.
     * Ferme proprement la session dans tous les cas.

* **Int√©gration** :

  * Appel√© dans les routes (`tweets.py`, `analytics.py`) via `Depends(get_db)`.
  * C‚Äôest le lien entre les **routes/services** et la base physique (SQLite, Postgres, etc.).

üëâ En r√©sum√© : ce fichier est le **plomberie DB** de l‚Äôapp : cr√©ation moteur, session, injection dans FastAPI, avec robustesse et compatibilit√© SQLite.

Tu veux que je passe aux **models** (vu qu‚Äôils h√©ritent de `Base`) pour compl√©ter le puzzle ORM ?

"""
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker, declarative_base
from sqlalchemy.pool import StaticPool
from typing import Generator
import logging

from .config import settings

logger = logging.getLogger(__name__)


def create_database_engine():
    """Cr√©e et configure le moteur de base de donn√©es selon l'environnement."""
    engine_kwargs = {"echo": settings.debug}
    
    # Configuration sp√©cifique pour SQLite
    if settings.database_url.startswith("sqlite"):
        engine_kwargs.update({
            "connect_args": {"check_same_thread": False},
            "poolclass": StaticPool
        })
    
    return create_engine(settings.database_url, **engine_kwargs)


# Initialisation du moteur et de la session
engine = create_database_engine()
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
Base = declarative_base()


def get_db() -> Generator:
    """
    Dependency injection pour obtenir une session de base de donn√©es.
    G√®re automatiquement l'ouverture, les erreurs et la fermeture de session.
    
    Yields:
        Session: Session SQLAlchemy configur√©e
    """
    db = SessionLocal()
    try:
        yield db
    except Exception as e:
        logger.error(f"Database session error: {e}")
        db.rollback()
        raise
    finally:
        db.close()