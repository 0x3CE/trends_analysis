# app/main.py
"""Main FastAPI application setup and configuration.


### üéØ Objectif principal

* Configurer et lancer l‚ÄôAPI FastAPI.
* G√©rer le cycle de vie (lifespan), la s√©curit√© (middlewares), les exceptions globales, et exposer les routes.

---

### ‚öôÔ∏è Les parties essentielles

1. **Configuration du logging**

   * Log format√© et niveau `INFO` par d√©faut.
   * Permet un suivi clair du d√©marrage, de l‚Äôarr√™t et des erreurs.

2. **`lifespan(app)` (asynccontextmanager)**

   * D√©marrage :

     * Log ‚Äústarting‚Äù.
     * Cr√©ation des tables DB (`Base.metadata.create_all(bind=engine)`).
     * V√©rifie que le `BEARER_TOKEN` est bien configur√© (sinon warning).
   * Arr√™t :

     * Log ‚Äúshutting down‚Äù.
       üëâ C‚Äôest ici que tu initialises tes d√©pendances critiques.

3. **Instance FastAPI (`app = FastAPI(...)`)**

   * Titre = `settings.app_name`.
   * Docs & Redoc activ√©s uniquement si `debug=True`.
   * Version fig√©e √† `1.0.0`.

4. **Middleware**

   * `TrustedHostMiddleware` :

     * `*` si debug, sinon restreint √† `localhost`.
   * `CORS` (Cross-Origin Resource Sharing) :

     * Ouvert √† tous (`*`) si debug (utile en dev front/back s√©par√©s).

5. **Gestion des exceptions globales**

   * `TwitterAPIError` ‚Üí `502 Bad Gateway`.
   * `DatabaseError` ‚Üí `500 Internal Server Error`.
   * `ConfigurationError` ‚Üí `500 Internal Server Error`.
     üëâ Ces handlers renvoient toujours une r√©ponse JSON uniforme (`{"detail": ...}`).

6. **Inclusion des routeurs**

   * `tweets.router` ‚Üí endpoints li√©s √† la collecte/lecture des tweets.
   * `analytics.router` ‚Üí endpoints pour analyser les donn√©es (hashtags, stats).

7. **Endpoints de sant√© (`/` et `/health`)**

   * `/` ‚Üí health check basique (status, nom app, version, API configur√©e ou non).
   * `/health` ‚Üí health check d√©taill√© :

     * V√©rifie DB avec `SELECT 1`.
     * V√©rifie pr√©sence de `BEARER_TOKEN`.
     * Retourne un statut global (`healthy` ou `degraded`).

---

### üöÄ En clair

Ce fichier **d√©marre ton app**, **branche la DB**, **s√©curise les acc√®s**, et **pr√©pare les routes**.
Il agit comme le **point d‚Äôentr√©e unique** et garantit que tout est pr√™t avant que les requ√™tes arrivent.

---

üëâ Tu veux que je trace maintenant la **vision compl√®te du flow de donn√©es** (depuis un appel API ‚Üí DB ‚Üí retour API), histoire de voir comment tout s‚Äôimbrique ?

"""
import logging
from contextlib import asynccontextmanager

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from fastapi.middleware.trustedhost import TrustedHostMiddleware
from fastapi.responses import JSONResponse

from .config import settings
from .database import engine, Base
from .routes import tweets, analytics
from .exceptions import TwitterAPIError, DatabaseError, ConfigurationError

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)


@asynccontextmanager
async def lifespan(app: FastAPI):
    """
    Gestionnaire du cycle de vie de l'application.
    Initialise la base de donn√©es au d√©marrage.
    """
    try:
        logger.info("Starting Twitter/X Collector application")
        
        # Cr√©ation des tables de base de donn√©es
        Base.metadata.create_all(bind=engine)
        logger.info("Database tables created successfully")
        
        # V√©rification de la configuration
        if not settings.bearer_token:
            logger.warning("BEARER_TOKEN not configured - API calls will fail")
        
        yield
        
    except Exception as e:
        logger.error(f"Failed to initialize application: {e}")
        raise
    finally:
        logger.info("Shutting down Twitter/X Collector application")


# Cr√©ation de l'application FastAPI
app = FastAPI(
    title=settings.app_name,
    description="API pour collecter et analyser des tweets depuis l'API Twitter/X v2",
    version="1.0.0",
    lifespan=lifespan,
    docs_url="/docs" if settings.debug else None,
    redoc_url="/redoc" if settings.debug else None
)

# Middleware de s√©curit√©
app.add_middleware(
    TrustedHostMiddleware, 
    allowed_hosts=["*"] if settings.debug else ["localhost", "127.0.0.1"]
)

# Middleware CORS pour le d√©veloppement
if settings.debug:
    app.add_middleware(
        CORSMiddleware,
        allow_origins=["*"],
        allow_credentials=True,
        allow_methods=["*"],
        allow_headers=["*"],
    )


# Gestionnaires d'exceptions globaux
@app.exception_handler(TwitterAPIError)
async def twitter_api_exception_handler(request: Request, exc: TwitterAPIError):
    """Gestionnaire pour les erreurs de l'API Twitter."""
    logger.error(f"Twitter API error: {exc}")
    return JSONResponse(
        status_code=502,
        content={"detail": f"Twitter API error: {str(exc)}"}
    )


@app.exception_handler(DatabaseError)
async def database_exception_handler(request: Request, exc: DatabaseError):
    """Gestionnaire pour les erreurs de base de donn√©es."""
    logger.error(f"Database error: {exc}")
    return JSONResponse(
        status_code=500,
        content={"detail": f"Database error: {str(exc)}"}
    )


@app.exception_handler(ConfigurationError)
async def configuration_exception_handler(request: Request, exc: ConfigurationError):
    """Gestionnaire pour les erreurs de configuration."""
    logger.error(f"Configuration error: {exc}")
    return JSONResponse(
        status_code=500,
        content={"detail": f"Configuration error: {str(exc)}"}
    )


# Inclusion des routeurs
app.include_router(tweets.router)
app.include_router(analytics.router)


@app.get("/", tags=["health"])
async def health_check():
    """
    Endpoint de sant√© de l'application.
    
    Returns:
        Dict: Statut de l'application et informations syst√®me
    """
    return {
        "status": "healthy",
        "message": f"{settings.app_name} is running",
        "version": "1.0.0",
        "api_configured": settings.bearer_token is not None
    }


@app.get("/health", tags=["health"])
async def detailed_health_check():
    """
    Endpoint de sant√© d√©taill√© avec v√©rification des d√©pendances.
    
    Returns:
        Dict: Statut d√©taill√© de l'application
    """
    health_status = {
        "status": "healthy",
        "checks": {
            "database": "ok",
            "twitter_api": "configured" if settings.bearer_token else "not_configured"
        },
        "timestamp": "2025-01-09T00:00:00Z"
    }
    
    try:
        # Test simple de la base de donn√©es
        from .database import SessionLocal
        db = SessionLocal()
        db.execute("SELECT 1")
        db.close()
    except Exception as e:
        health_status["status"] = "degraded"
        health_status["checks"]["database"] = f"error: {str(e)}"
    
    return health_status